#include "hal_sys.h"
uchar ABuf,StatusBuf;

#define KEY	   	   	   	   	   	   	P10D
#define	HALL   	   	   	   	   	   	P11D
#define	LED	   	   	   	   	   	   	P12D
#define	BOOST_EN   	   	   	   	P14D

#define HALL_ON_TIME   	   	   	   	   	20
#define	KEY_ON_TIME	   	   	   	   	   	500
#define HALL_OFF_TIME  	   	   	   	   	20
#define KEY_LOOSE_TIME 	   	   	   	20
#define BLANK_TIME 	   	   	   	   	   	500
#define	SLEEP_TIME 	   	   	   	   	   	10000

#define STA_KEY_ON 	   	   	   	   	   	0x0001
#define STA_HALL_ON	   	   	   	   	   	0x0002
#define STA_FLASH_ON   	   	   	   	   	0x0004

u16	state; 	   	   	   	   	   	   	   	// 状态
u8 	hallOnTime;	   	   	   	   	   	// 霍尔打开确认时间
u8 	hallOffTime;   	   	   	   	   	// 霍尔关闭确认时间
u16	keyOnTime; 	   	   	   	   	   	// 按键按下确认时间
u8 	keyLooseTime;  	   	   	   	   	// 按键松手确认时间
u16	blankTime; 	   	   	   	   	   	// 闪烁间隔时间
u16	sleepTime; 	   	   	   	   	   	// 睡眠时间
u8 	tmCnt;
u16	s;

void funInit(void)
{
   	state = 0;
   	hallOnTime = HALL_ON_TIME;
   	keyOnTime = KEY_ON_TIME;
   	hallOffTime = HALL_OFF_TIME;
   	keyLooseTime = KEY_LOOSE_TIME;
   	blankTime = 0;
   	sleepTime = 1000;
   	s = 0;
   	tmCnt = 0;
}

void control(void)
{
   	if(!HALL && !(state & STA_HALL_ON))
   	{
   	   	if(hallOnTime == 0)
   	   	{
   	   	   	state |= STA_HALL_ON;
   	   	}
   	}
   	else
   	   	hallOnTime = HALL_ON_TIME;

   	if(HALL && (state & STA_HALL_ON))
   	{
   	   	if(hallOffTime == 0)
   	   	{
   	   	   	state &= ~STA_HALL_ON;
   	   	   	BOOST_EN = 0;
   	   	   	blankTime = 0;
   	   	}
   	}
   	else
   	   	hallOffTime = HALL_OFF_TIME;

   	if(!KEY && !(state & STA_KEY_ON))
   	{
   	   	if(keyOnTime == 0)
   	   	{
   	   	   	state |= STA_KEY_ON;
   	   	   	if(state & STA_HALL_ON)
   	   	   	{
   	   	   	   	if(BOOST_EN)
   	   	   	   	{
   	   	   	   	   	BOOST_EN = 0;
   	   	   	   	   	blankTime = 0;
   	   	   	   	}
   	   	   	   	else
   	   	   	   	{
   	   	   	   	   	BOOST_EN = 1;
   	   	   	   	   	tmCnt = 0;
   	   	   	   	   	s = 0;
   	   	   	   	}
   	   	   	}
   	   	   	else
   	   	   	{
   	   	   	   	state |= STA_FLASH_ON;
   	   	   	}
   	   	}
   	}
   	else
   	   	keyOnTime = KEY_ON_TIME;

   	if(KEY && (state & STA_KEY_ON))
   	{
   	   	if(keyLooseTime == 0)
   	   	{
   	   	   	state &= ~STA_KEY_ON;
   	   	}
   	}
   	else
   	   	keyLooseTime = KEY_LOOSE_TIME;

   	if(!BOOST_EN)
   	{
   	   	if(state & STA_FLASH_ON)
   	   	{
   	   	   	LED = 1;
   	   	   	state &= ~STA_FLASH_ON;
   	   	   	blankTime = BLANK_TIME;
   	   	}
   	   	else if(blankTime == 0)
   	   	{
   	   	   	LED = 0;
   	   	}
   	}

   	if(tmCnt >= 5)
   	{
   	   	BOOST_EN = 0;
   	}
}

void sleepManage(void)
{
   	if(BOOST_EN || (state & STA_HALL_ON))
   	   	sleepTime = SLEEP_TIME;

   	if(sleepTime == 0)
   	{
   	   	LED = 1;
    KBIE = 1;   // 使能键盘中断
    KBIM = BV(0);
   	   	T0IE = 0;
    STOP;      	   	// 执行STOP指令

    NOP;
    NOP;
    NOP;
    NOP;

    sleepTime = SLEEP_TIME;
    KBIE = 0;
   	   	T0IE = 1;
  }
}

void main()
{
   	HalSysInit();
   	HalTim0Init();
   	   	funInit();
   	   	
   	while(1)
   	{
   	   	   	control();
   	   	   	sleepManage();
   	}
}

void int_isr(void)__interrupt
{
   	__asm
   	  movra   _ABuf
   	  swapar  _STATUS
   	  movra   _StatusBuf
   	__endasm;
   	
   	//T0
   	if(T0IE && T0IF)//1ms
   	{
   	   	T0CNT=TIM0_CNT;
   	   	T0IF = 0;
   	   	   	if(BOOST_EN)
   	   	   	{
   	   	   	   	s++;
   	   	   	   	if(s >= 60000)
   	   	   	   	{
   	   	   	   	   	s = 0;
   	   	   	   	   	tmCnt++;
   	   	   	   	}
   	   	   	}
   	   	   	if(hallOnTime)
   	   	   	   	hallOnTime--;
   	   	   	if(keyOnTime)
   	   	   	   	keyOnTime--;
   	   	   	if(hallOffTime)
   	   	   	   	hallOffTime--;
   	   	   	if(keyLooseTime)
   	   	   	   	keyLooseTime--;
   	   	   	if(blankTime)
   	   	   	   	blankTime--;
   	   	   	if(sleepTime)
   	   	   	   	sleepTime--;
   	}
   	//T1
   	/*if(T1IE && T1IF)
   	{
    T1IF = 0;          	  
   	}*/
   	//INT
   	/*if(INTIE && INTIF)
   	{
    INTIF = 0;
   	   	CLRWDT;//清除看门狗计数
   	}*/
   	//KEY
   	if(KBIE && KBIF)
   	{
       	KBIF = 0;
   	}
   	
   	__asm
   	swapar  _StatusBuf
   	movra   _STATUS
   	swapr   _ABuf
   	swapar  _ABuf
   	__endasm;
}

